import React, { useState, useEffect, useCallback } from 'react';
import './App.css';
import SudokuGrid from './components/SudokuGrid';
import DifficultySelector from './components/DifficultySelector';
import NumberPad from './components/NumberPad';
import GameControls from './components/GameControls';
import GameStats from './components/GameStats';
import { SudokuBoard, Difficulty, SudokuPuzzle, GameStats as Stats } from './types/sudoku';
import { generatePuzzle, copyBoard, isBoardComplete, isBoardCorrect, hasErrors } from './engine/sudokuGenerator';

function App() {
  const [difficulty, setDifficulty] = useState<Difficulty>(Difficulty.EASY);
  const [puzzle, setPuzzle] = useState<SudokuPuzzle | null>(null);
  const [board, setBoard] = useState<SudokuBoard>([]);
  const [selectedCell, setSelectedCell] = useState<{ row: number; col: number } | null>(null);
  const [errors, setErrors] = useState<boolean[][]>([]);
  const [isCompleted, setIsCompleted] = useState(false);
  const [startTime, setStartTime] = useState<number | null>(null);
  const [elapsedTime, setElapsedTime] = useState(0);
  const [stats, setStats] = useState<Stats>({
    puzzlesCompleted: 0,
    bestTime: null,
    lastPlayed: null
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ localStorage
  useEffect(() => {
    const savedStats = localStorage.getItem('sudokuStats');
    if (savedStats) {
      setStats(JSON.parse(savedStats));
    }
  }, []);

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  const createNewGame = useCallback(() => {
    const newPuzzle = generatePuzzle(Date.now(), difficulty);
    setPuzzle(newPuzzle);
    setBoard(copyBoard(newPuzzle.board));
    setSelectedCell(null);
    setErrors(Array(9).fill(null).map(() => Array(9).fill(false)));
    setIsCompleted(false);
    setStartTime(Date.now());
    setElapsedTime(0);
  }, [difficulty]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    createNewGame();
  }, [createNewGame]);

  // –¢–∞–π–º–µ—Ä
  useEffect(() => {
    if (startTime && !isCompleted) {
      const interval = setInterval(() => {
        setElapsedTime(Math.floor((Date.now() - startTime) / 1000));
      }, 1000);

      return () => clearInterval(interval);
    }
  }, [startTime, isCompleted]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —è—á–µ–π–∫—É
  const handleCellClick = (row: number, col: number) => {
    if (puzzle && puzzle.board[row][col] === null && !isCompleted) {
      setSelectedCell({ row, col });
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞
  const handleNumberClick = useCallback((num: number) => {
    if (selectedCell && !isCompleted) {
      const newBoard = copyBoard(board);
      newBoard[selectedCell.row][selectedCell.col] = num;
      setBoard(newBoard);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
      const newErrors = hasErrors(newBoard);
      setErrors(newErrors);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      if (isBoardComplete(newBoard) && isBoardCorrect(newBoard)) {
        setIsCompleted(true);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const newStats = {
          puzzlesCompleted: stats.puzzlesCompleted + 1,
          bestTime: stats.bestTime === null || elapsedTime < stats.bestTime
            ? elapsedTime
            : stats.bestTime,
          lastPlayed: new Date().toISOString()
        };
        setStats(newStats);
        localStorage.setItem('sudokuStats', JSON.stringify(newStats));
      }
    }
  }, [selectedCell, isCompleted, board, stats, elapsedTime]);

  // –û—á–∏—Å—Ç–∫–∞ —è—á–µ–π–∫–∏
  const handleClear = useCallback(() => {
    if (selectedCell && !isCompleted) {
      const newBoard = copyBoard(board);
      newBoard[selectedCell.row][selectedCell.col] = null;
      setBoard(newBoard);

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
      const newErrors = hasErrors(newBoard);
      setErrors(newErrors);
    }
  }, [selectedCell, isCompleted, board]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è
  const handleCheckSolution = () => {
    if (isBoardComplete(board)) {
      if (isBoardCorrect(board)) {
        alert('–û—Ç–ª–∏—á–Ω–æ! –†–µ—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ!');
        setIsCompleted(true);
      } else {
        alert('–í —Ä–µ—à–µ–Ω–∏–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!');
      }
    } else {
      alert('–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    }
  };

  // –ü–æ–¥—Å–∫–∞–∑–∫–∞
  const handleHint = () => {
    if (puzzle && selectedCell && !isCompleted) {
      const solution = puzzle.solution[selectedCell.row][selectedCell.col];
      if (solution !== null) {
        const newBoard = copyBoard(board);
        newBoard[selectedCell.row][selectedCell.col] = solution;
        setBoard(newBoard);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
        const newErrors = hasErrors(newBoard);
        setErrors(newErrors);
      }
    }
  };

  // –ù–æ–≤–∞—è –∏–≥—Ä–∞
  const handleNewGame = () => {
    if (window.confirm('–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É? –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω.')) {
      createNewGame();
    }
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const handleDifficultyChange = (newDifficulty: Difficulty) => {
    setDifficulty(newDifficulty);
    setTimeout(() => {
      const newPuzzle = generatePuzzle(Date.now(), newDifficulty);
      setPuzzle(newPuzzle);
      setBoard(copyBoard(newPuzzle.board));
      setSelectedCell(null);
      setErrors(Array(9).fill(null).map(() => Array(9).fill(false)));
      setIsCompleted(false);
      setStartTime(Date.now());
      setElapsedTime(0);
    }, 0);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
  useEffect(() => {
    const handleKeyPress = (e: KeyboardEvent) => {
      if (!selectedCell || isCompleted) return;

      // –ß–∏—Å–ª–æ–≤—ã–µ –∫–ª–∞–≤–∏—à–∏
      if (e.key >= '1' && e.key <= '9') {
        handleNumberClick(parseInt(e.key));
      }

      // –£–¥–∞–ª–µ–Ω–∏–µ
      if (e.key === 'Backspace' || e.key === 'Delete' || e.key === '0') {
        handleClear();
      }

      // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å—Ç—Ä–µ–ª–∫–∞–º–∏
      if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {
        e.preventDefault();
        const newRow = selectedCell.row + (e.key === 'ArrowDown' ? 1 : e.key === 'ArrowUp' ? -1 : 0);
        const newCol = selectedCell.col + (e.key === 'ArrowRight' ? 1 : e.key === 'ArrowLeft' ? -1 : 0);

        if (newRow >= 0 && newRow < 9 && newCol >= 0 && newCol < 9) {
          setSelectedCell({ row: newRow, col: newCol });
        }
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [selectedCell, isCompleted, handleNumberClick, handleClear]);

  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  if (!puzzle) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  return (
    <div className="App">
      <header className="App-header">
        <h1>üß© Sudoku</h1>
        <p>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞-–≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞</p>
      </header>

      <div className="game-container">
        <div className="left-panel">
          <DifficultySelector
            currentDifficulty={difficulty}
            onSelectDifficulty={handleDifficultyChange}
          />

          <div className="timer">
            <h3>–í—Ä–µ–º—è</h3>
            <div className="timer-display">{formatTime(elapsedTime)}</div>
          </div>

          <GameStats stats={stats} />
        </div>

        <div className="main-panel">
          <SudokuGrid
            board={board}
            initialBoard={puzzle.board}
            selectedCell={selectedCell}
            errors={errors}
            onCellClick={handleCellClick}
          />

          <NumberPad
            onNumberClick={handleNumberClick}
            onClear={handleClear}
          />

          <GameControls
            onNewGame={handleNewGame}
            onCheckSolution={handleCheckSolution}
            onHint={handleHint}
            isCompleted={isCompleted}
          />
        </div>

        <div className="right-panel">
          <div className="instructions">
            <h3>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å</h3>
            <ul>
              <li>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–µ—Ç–∫—É 9√ó9 —á–∏—Å–ª–∞–º–∏ –æ—Ç 1 –¥–æ 9</li>
              <li>–í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —á–∏—Å–µ–ª</li>
              <li>–í –∫–∞–∂–¥–æ–º —Å—Ç–æ–ª–±—Ü–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —á–∏—Å–µ–ª</li>
              <li>–í –∫–∞–∂–¥–æ–º –∫–≤–∞–¥—Ä–∞—Ç–µ 3√ó3 –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —á–∏—Å–µ–ª</li>
            </ul>

            <h4>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h4>
            <ul>
              <li>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —è—á–µ–π–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ</li>
              <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏—à–∏ 1-9 –¥–ª—è –≤–≤–æ–¥–∞</li>
              <li>Backspace/Delete –¥–ª—è –æ—á–∏—Å—Ç–∫–∏</li>
              <li>–°—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
